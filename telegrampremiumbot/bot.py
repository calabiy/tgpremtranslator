import os
import tempfile
import telebot
from telebot import types
from googletrans import Translator, LANGUAGES
from faster_whisper import WhisperModel
from pydub import AudioSegment

TOKEN = "–¢–û–ö–ï–ù"
bot = telebot.TeleBot(TOKEN)
translator = Translator()
model = WhisperModel("small", device="cpu", compute_type="int8")

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}  # chat_id: {"active": True, "lang": "ru"}

def get_user_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"active": True, "lang": "ru"}
    return user_state[chat_id]

def convert_ogg_to_wav(ogg_path, wav_path):
    audio = AudioSegment.from_file(ogg_path)
    audio.export(wav_path, format="wav")

@bot.message_handler(commands=['start'])
def start_handler(message):
    state = get_user_state(message.chat.id)
    state["active"] = True
    bot.send_message(message.chat.id, f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á—ë–Ω. –¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {state['lang']}.")

@bot.message_handler(commands=['stop'])
def stop_handler(message):
    state = get_user_state(message.chat.id)
    state["active"] = False
    bot.send_message(message.chat.id, "‚õî –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏—Ç—å ‚Äî /start.")

@bot.message_handler(commands=['lang'])
def lang_handler(message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.send_message(message.chat.id, "‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /lang <–∫–æ–¥_—è–∑—ã–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /lang en, /lang de)")
        return

    lang_code = parts[1].lower()
    if lang_code not in LANGUAGES:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞: {lang_code}\n‚úÖ –ü—Ä–∏–º–µ—Ä: /lang en (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π), /lang ru (—Ä—É—Å—Å–∫–∏–π), /lang de (–Ω–µ–º–µ—Ü–∫–∏–π)"
        )
        return

    state = get_user_state(message.chat.id)
    state["lang"] = lang_code
    lang_name = LANGUAGES[lang_code].capitalize()
    bot.send_message(message.chat.id, f"‚úÖ –Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_name} ({lang_code})")

@bot.message_handler(commands=['help'])
def help_handler(message):
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥\n"
        "/stop ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥\n"
        "/lang <–∫–æ–¥_—è–∑—ã–∫–∞> ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /lang en)\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –ø–µ—Ä–µ–≤–µ–¥—É!"
    )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(content_types=['voice'])
def voice_handler(message):
    state = get_user_state(message.chat.id)
    if not state["active"]:
        return

    bot.send_chat_action(message.chat.id, "typing")
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as ogg_file:
        ogg_file.write(downloaded_file)
        ogg_path = ogg_file.name

    wav_path = ogg_path.replace(".ogg", ".wav")
    convert_ogg_to_wav(ogg_path, wav_path)

    segments, _ = model.transcribe(wav_path)
    text = " ".join([seg.text for seg in segments])

    os.remove(ogg_path)
    os.remove(wav_path)

    bot.send_message(message.chat.id, f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:\n{text.strip()}")

    translated = translator.translate(text.strip(), dest=state["lang"]).text
    bot.send_message(message.chat.id, f"üî§ –ü–µ—Ä–µ–≤–æ–¥ ({state['lang']}):\n{translated}")

@bot.message_handler(func=lambda m: True)
def text_handler(message):
    state = get_user_state(message.chat.id)
    if not state["active"]:
        return

    translated = translator.translate(message.text, dest=state["lang"]).text
    bot.send_message(message.chat.id, f"üî§ –ü–µ—Ä–µ–≤–æ–¥ ({state['lang']}):\n{translated}")

if __name__ == "__main__":
    bot.polling()
